// Signature format: 4.0
package com.google.android.horologist.auth.data.credman {

  public final class CredentialResponseReceiver {
    ctor public CredentialResponseReceiver();
    method public suspend Object? await(kotlin.coroutines.Continuation<? super androidx.credentials.GetCredentialResponse>);
    method public android.os.ResultReceiver getResultReceiver();
    method public android.os.Parcelable toParcelable();
    property public final android.os.ResultReceiver resultReceiver;
    field public static final com.google.android.horologist.auth.data.credman.CredentialResponseReceiver.Companion Companion;
    field public static final String ExceptionMessage = "credman.exception.message";
    field public static final String ExceptionType = "credman.exception.type";
    field public static final String Receiver = "credman.receiver";
    field public static final String Request = "credman.request";
    field public static final String ResultData = "credman.result.data";
    field public static final String ResultType = "credman.result.type";
  }

  public static final class CredentialResponseReceiver.Companion {
    method public android.os.Bundle toBundle(androidx.credentials.GetCredentialRequest);
    method public android.os.Bundle toBundle(Object);
    method public androidx.credentials.GetCredentialRequest toGetCredentialRequest(android.os.Bundle);
  }

  public final class CredentialSerializer implements androidx.datastore.core.Serializer<androidx.credentials.Credential> {
    method public androidx.credentials.Credential getDefaultValue();
    method public androidx.credentials.CustomCredential getNone();
    method public suspend Object? readFrom(java.io.InputStream input, kotlin.coroutines.Continuation<? super androidx.credentials.Credential>);
    method public suspend Object? writeTo(androidx.credentials.Credential t, java.io.OutputStream output, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public final androidx.credentials.CustomCredential None;
    property public androidx.credentials.Credential defaultValue;
    field public static final com.google.android.horologist.auth.data.credman.CredentialSerializer INSTANCE;
  }

}

package com.google.android.horologist.auth.data.tokenshare {

  public interface TokenBundleRepository<T> {
    method public kotlinx.coroutines.flow.Flow<T> getFlow();
    method public default suspend Object? isAvailable(kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public default boolean isRequestAvailable();
    property public abstract kotlinx.coroutines.flow.Flow<T> flow;
  }

}

